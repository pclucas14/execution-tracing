#!/usr/bin/env python3
"""
Visualize execution trace files generated by the tracer.

Examples:
    # Show as a tree (default)
    python visualize_trace.py trace_output.json
    
    # Show summary statistics
    python visualize_trace.py trace_output.json -f summary
    
    # Generate a DOT file for Graphviz
    python visualize_trace.py trace_output.json -f dot -o callgraph.dot
    
    # Generate interactive HTML visualization
    python visualize_trace.py trace_output.json -f html
    
    # Generate and serve HTML visualization on a port
    python visualize_trace.py trace_output.json -f html --serve --port 8080
    
    # Show everything
    python visualize_trace.py trace_output.json -f all
"""

import sys
import os
import argparse
import tempfile
import http.server
import socketserver
import threading
import time

# Add the project root to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.visualizer.trace_visualizer import main
from visualizer.html_visualizer import generate_html_visualization


def serve_html(html_file, port=8080):
    """Serve an HTML file on a simple HTTP server."""
    class Handler(http.server.SimpleHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, directory=os.path.dirname(html_file), **kwargs)
        
        def log_message(self, format, *args):
            # Suppress logs
            pass
    
    with socketserver.TCPServer(("", port), Handler) as httpd:
        print(f"\nâœ“ Serving visualization at http://localhost:{port}/{os.path.basename(html_file)}")
        print(f"\nTo view from your local machine, use SSH port forwarding:")
        print(f"  ssh -L {port}:localhost:{port} [your-vm-connection]")
        print(f"\nThen open in your browser: http://localhost:{port}/{os.path.basename(html_file)}")
        print("\nPress Ctrl+C to stop the server...")
        
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nServer stopped.")


def main():
    parser = argparse.ArgumentParser(description='Visualize Python execution traces')
    parser.add_argument('trace_file', help='JSON trace file to visualize')
    parser.add_argument('-f', '--format', 
                        choices=['tree', 'summary', 'dot', 'html', 'all'],
                        default='tree',
                        help='Output format (default: tree)')
    parser.add_argument('-o', '--output', help='Output file (default: stdout or browser for HTML)')
    parser.add_argument('--serve', action='store_true', 
                        help='Serve HTML output on HTTP server (for remote viewing)')
    parser.add_argument('--port', type=int, default=8080,
                        help='Port for HTTP server (default: 8080)')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.trace_file):
        print(f"Error: Trace file '{args.trace_file}' not found")
        return 1
    
    try:
        if args.format == 'html':
            if args.serve:
                # Generate HTML to temp file if no output specified
                if not args.output:
                    with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
                        output_file = f.name
                else:
                    output_file = args.output
                
                # Generate the HTML
                generate_html_visualization(args.trace_file, output_file)
                
                # Serve it
                serve_html(output_file, args.port)
            else:
                generate_html_visualization(args.trace_file, args.output)
        else:
            visualize_trace(args.trace_file, args.format, args.output)
    except Exception as e:
        print(f"Error visualizing trace: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())